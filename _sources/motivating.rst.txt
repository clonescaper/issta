Motivating
=============


Data Description
-----------------
Motivating example of code clone at diﬀerent levels. All the clone instances are of the same semantics. All the clone instances  are solutions of the same problem, but with diﬀerent levels of syntactic changes:

* the Type I instance modifes indentation, adds spaces, and deletes comment
* the Type II instance renames two variables a and b, adds spaces, and changes indentation
* the Type III instance swaps code orders, removes braces, adds spaces, modify variable defnition statement and changes code indentation
* the Type IV instance is more compact, using division instead of continuous subtraction to obtain integer quotients.
* the Mutated instance splitting large constants into smaller ones, swapping the code order, removing part of the code comment, transforming a for-loop to a while-loop, and modifying constants




.. code-block:: c++
   :linenos:
   :caption: #1 Original code
   :name: 

   int main(){
        int a[6]={100,50,20,10,5,1},b[6];
        int n,i,k;
        scanf("%d",&n);//input
        for(i=0; i<6; i++)
            b[i]=0;
        for(k=0; k<6; k++)
            for(i=0; n>=a[k]; i++){
                n=n-a[k];
                b[k]+=1;
            }
        for(i=0; i<6; i++)
        printf("%d\n",b[i]);
        return 0;
    } 

.. code-block:: c++
   :linenos:
   :caption: #2 Type I clone code
   :name: 

   int main(){
        int a[6]={100,50,20,10,5,1},b[6];
        int n,i,k;
            scanf("%d",&n);
        for(i=0; i<6; i++)
                b[i]=0;

        for(k=0; k<6; k++)
            for(i=0; n>=a[k]; i++){
                n=n-a[k];
                b[k]+=1;
                    }

            for(i=0; i<6; i++)
                printf("%d\n",b[i]);

        return 0;
   }

.. code-block:: c++
   :linenos:
   :caption: #3 Type II clone code
   :name: 

   int main(){
        int a_1[6]={100,50,20,10,5,1},b_1[6];
        int n,i,k;
        scanf("%d",&n);
        for(i=0; i<6; i++)
        b_1[i]=0;
        for(k=0; k<6; k++)
            for(i=0; n>=a_1[k]; i++){
                n=n-a_1[k];
                b_1[k]+=1;
            }
        for(i=0; i<6; i++)
                printf("%d\n",b_1[i]);



    return 0;
    }

.. code-block:: c++
   :linenos:
   :caption: #4 Type III clone code
   :name: 

   int main(){
        int a_1[6]={100,50,20,10,5,1};
            int b[6];
        int n=0,i=0,k=0;
            for(i=0;i<6;i++) 
                b[i]=0;

        scanf("%d",&n);

        for(k=0;k<6;k++)
                for(i=0;n>=a_1[k];i++){
                    n=n-a_1[k];
                    b[k]+=1;
                }

        for(i=0;i<6;i++) 
                printf("%d\n",b[i]);

        return 0;
    }

.. code-block:: c++
   :linenos:
   :caption:  #5 Type IV clone code
   :name: 

   int main()
    {
        int n,a[6],i;
        int b[6]={100,50,20,10,5,1};

        scanf("%d",&n);

        for(i=0;i<6;i++)
        {
            a[i]=n/b[i];
            n=n-a[i]*b[i];
            printf("%d\n",a[i]);
        }

        return 0;




   }

.. code-block:: c++
   :linenos:
   :caption:  #6 Mutated code
   :name: 

   int main () {
        int n, i, k1;
        int a [(3 + 2 + 1)] = {100, 50, 20, (5 + 2.5 + 2.5), (2.5 + 1.25 + 1.25), (0.5 + 0.25 + 0.25)};
        int b [6]; scanf ("%d", &n);
        {  i = (0 + 0 + 0);
            while (i < 6) {
                b[i] = (0 + 0 + 0); 
                i = i + 1; }; }
        {   k1 = 0;
            while (k1 < 6) {{   i = 0;
                while (a[k1] <= n) {
                i++;n = n - a[k1];
                b[k1] += 1;};}
                k1 = k1 + 1;};
        }{i = 0;
        while (i < 6) {
            printf ("%d\n", b[i]);i++;};
    } return 0;}


Test Data
--------------------

The Motivating data is in `Github <https://github.com/clonescaper/CLONESCAPER/tree/main/motivationData/Data>`_.

Here we transformed #1 in motivation using a randomized algorithm to generate a lot of equivalent clone codes and then tested it with three tools to find clone pairs that were not detected by any of the three tools.


OriginalChangedPair holds the corresponding clone pairs.

In the 142 1.c corresponds to #1 Original Code 2.c corresponds to #6 Mutated code   ProgramsDump corresponds to the unchanged original code.
ProgramsMutate is the code after the corresponding equivalent mutation.

The RandomEncodingResult holds the corresponding random codes.

Because deep learning tools experiments have uncertainty, there is uncertainty in the results of each experiment when testing. The test requires many data to be put together for testing.


Astnn Result
------------
`Github <https://github.com/clonescaper/CLONESCAPER/tree/main/motivationData/Machine_learning_Test_Result/astnn>`_.
data location
in astnn_motivation/300

+-------------------------------------------------------+
| #1 Original code: 600.c,200.c,300.c,400.c,500.c,600.c |
+-------------------------------------------------------+
| 201.c: # Type I code                                  |
+-------------------------------------------------------+
| 301.c: # Type II code                                 |
+-------------------------------------------------------+
| 401.c: # Type IIIcode                                 |
+-------------------------------------------------------+
| 501.c: # Type IV code                                 |
+-------------------------------------------------------+
| 601.c: #6 Mutated code                                |
+-------------------------------------------------------+


in astnnMotivationResult reserve the prediction result.

+------------+------------+
| 3000000200 | 3000000201 |
+------------+------------+
| 3000000300 | 3000000301 |
+------------+------------+
| 3000000400 | 3000000401 |
+------------+------------+
| 3000000500 | 3000000501 |
+------------+------------+
| 3000000600 | 3000000601 |
+------------+------------+

test result

+-----------------+----------------------+----------------------+----------------------+--------------+ 
| correct: type:1 | test1_id: 3000000200 | test2_id: 3000000201 | true: 1              | predicted: 1 | 
+-----------------+----------------------+----------------------+----------------------+--------------+ 
| correct: type:1 | test1_id: 3000000300 | test2_id: 3000000301 | true: 1              | predicted: 1 |              
+-----------------+----------------------+----------------------+----------------------+--------------+ 
| correct: type:1 | test1_id: 3000000400 | test2_id: 3000000401 | true: 1              | predicted: 1 |              
+-----------------+----------------------+----------------------+----------------------+--------------+ 
| correct: type:1 | test1_id: 3000000500 | test2_id: 3000000501 | true: 1              | predicted: 1 |              
+-----------------+----------------------+----------------------+----------------------+--------------+ 
| error : type:1  | test1_id: 3000000600 | test2_id: 3000000601 | true: 1              | predicted: 0 |
+-----------------+----------------------+----------------------+----------------------+--------------+

FCDetector Result 
-----------------
`Github <https://github.com/clonescaper/CLONESCAPER/tree/main/motivationData/Machine_learning_Test_Result/fcdector>`_.
data location
\\motivation_data\\OriginalChangedPair

+---------+-----+----------+------+
| 142/1.c | :#1 | original | code |
+---------+-----+----------+------+
| 142/2.c | :#6 | mutated  | code |
+---------+-----+----------+------+

FcdectorMotivationResult.txt reserve the test result.

test result

+--------------+----------------+-------+-------+
| pred_cur:[0] | traget_cur:[1] | 142/1 | 142/1 |
+--------------+----------------+-------+-------+

TBCCD Result
-------------
`Github <https://github.com/clonescaper/CLONESCAPER/tree/main/motivationData/Machine_learning_Test_Result/tbccd>`_.

data location:

+---------------------------------+-------+--------------------+
| \motivation_data\ProgramsDump   | 142.c | :#1 original  code |
+---------------------------------+-------+--------------------+
| \motivation_data\ProgramsMutate | 142.c | :#6 mutated   code |
+---------------------------------+-------+--------------------+

TbccdMotivationResult.txt reserve the test result

test result 

+------------+----------------------------------------------------------------------------------------------------------------+
| correct: 1 | predict: -1 clone_paris: ['./TBCCD/TestDate/ProgramsDump/142.c', './TBCCD/TestDate/ProgramsMutate/142.c', '1'] |
+------------+----------------------------------------------------------------------------------------------------------------+